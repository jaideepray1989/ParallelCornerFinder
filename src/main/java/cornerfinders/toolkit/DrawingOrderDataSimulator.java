// (c) MIT 2003.  All rights reserved.

package cornerfinders.toolkit;

import edu.mit.sketch.system.BBItemId;
import edu.mit.sketch.system.BBItemType;
import edu.mit.sketch.system.BBSketchItem;
import edu.mit.sketch.system.SketchSystem;
import edu.mit.sketch.system.StageBasedScheduler;
import java.net.URL;
import java.util.Iterator;
import java.util.List;


/**
 * This class simulates the drawing of a sketch by following the order 
 * given to its simulateInOrder method. The stroke data is loaded
 * from a file generated by a {@link DataCollector} object.<p>
 *
 * Created: Wed Sep  5 17:54:31 2001<br>
 * Copyright: Copyright (C) 2001 by MIT.  All Rights Reserved.<br>
 *
 * @author <a href="mailto:moltmans@ai.mit.edu">Michael Oltmans, Metin Sezgin</a>
 * @version $Id: DrawingOrderDataSimulator.java,v 1.1 2006-11-22 22:54:36 hammond Exp $
 **/
public class DrawingOrderDataSimulator 
extends DataSimulator 
{


  public DrawingOrderDataSimulator( URL url )
  {
    super( url );
  }

  /**
   * Send the strokes stored in this simulator object to the listeners,
   * one at a time, obeying the order given in the order argument.
   * Also return a status string.
   **/
  public String simulateData( List listeners, int order[], SketchSystem system ) 
  {
    String     status_string = "";
    StrokeData stroke;


    for ( int i=0; i<order.length; i++ ) {
	stroke = (StrokeData)m_data.get(order[i]);
	
	if ( i%50 == 0 )
	    System.gc();
	Iterator listenerIterator = listeners.iterator();
	
	while( listenerIterator.hasNext() ) {
	    Object listener_object = listenerIterator.next();
	    StrokeDataListener listener = (StrokeDataListener)listener_object;
	    listener.handleStroke( stroke );
	}
	
	while ( true ) {
	    try {
		Thread.sleep( 3000l );
	    } catch( Exception e ) {
		System.err.println( e );
	    }
	    System.out.println("waiting...");
	    if ( ((StageBasedScheduler)system.getBBSystem().getScheduler()).reallyDoneProcessing() )
		break;
	}
	
	List all_items = system.getBBSystem().getBlackboard().getAllItems().getAllItems();
	
	int min_unbound_components = Integer.MAX_VALUE;

	for ( int j=0; j<all_items.size(); j++ ) {
	    if ( ((BBSketchItem)all_items.get(j)).isa( BBItemType.getType( "Stickfigure" ) ) ) {
		int unbounds = ((BBSketchItem)all_items.get(j)).getTemplate().getUnboundComponents().size();
		if ( unbounds < min_unbound_components ) {
		    min_unbound_components = unbounds;
		}
	    }
	}
	

	status_string += "strokes = " + (i+1) + 
	                 "\titems in the BB system " + all_items.size() + 
	                 "\tcurrent id# = " + BBItemId.getCurrentId() +
	                 "\tsat   CCs = " + edu.mit.sketch.system.StickfigureKS3.cases_where_constraints_satisfied +	
	                 "\tunsat CCs = " + edu.mit.sketch.system.StickfigureKS3.cases_where_noconstraints_satisfied +    
	                 "\tmin# unbound = " + min_unbound_components + "\n";	
    }
    
    return status_string;
  }

  /**
   * Return the length of the data, so that controllers can enumerate 
   * orders of the correct size.
   **/
    public int getDataLength()
  {
      return m_data.size();
  }
}// StrokeOrderDataSimulator
