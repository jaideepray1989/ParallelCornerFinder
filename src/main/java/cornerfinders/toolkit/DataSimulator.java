// (c) MIT 2003.  All rights reserved.

package cornerfinders.toolkit;

import edu.mit.sketch.system.SketchSystem;
import edu.mit.sketch.system.StageBasedScheduler;
import java.net.URL;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

/**
 * This class can simulate a set of stroke data by sending it to one
 * or more {@link StrokeDataListener}s.  The stroke data is loaded
 * from a file generated by a {@link DataCollector} object.<p>
 *
 * Created: Wed Sep  5 17:54:31 2001<br>
 * Copyright: Copyright (C) 2001 by MIT.  All Rights Reserved.<br>
 *
 * @author <a href="mailto:moltmans@ai.mit.edu">Michael Oltmans</a>
 * @version $Id: DataSimulator.java,v 1.1 2006-11-22 22:54:35 hammond Exp $
 **/
public class DataSimulator {
    protected Thread timer;

  protected List m_data;

  public DataSimulator( URL url )
  {
    timer = new Thread();
    timer.start();
    m_data = DataCollector.loadData( url );
  }
  /**
   * Send the strokes stored in this simulator object to the listener,
   * one at a time.
   **/
  public void simulateData( StrokeDataListener listener, SketchSystem system ) 
  {
    simulateData( Collections.singletonList( listener), system );
  }

  /**
   * Send the strokes, one at a time, stored in this simulator object
   * to each of the given listeners.
   **/
  public void simulateData( List listeners )
  {
      Iterator it  = m_data.iterator();
      StrokeData stroke;
      while( it.hasNext() ) {
	  try {
	      Thread.sleep( 5000l );
	  } catch( Exception e ) {
	      System.err.println( e );
	  }
	  System.out.println("waiting...");
	  
	  stroke = (StrokeData)it.next();
	  
	  Iterator listenerIterator = listeners.iterator();
	  while( listenerIterator.hasNext() ) {
	      
	      Object listener_object = listenerIterator.next();
	      StrokeDataListener listener = (StrokeDataListener)listener_object;
	      listener.handleStroke( stroke );
	  }
      }
  }

  /**
   * Send the strokes, one at a time, stored in this simulator object
   * to each of the given listeners.
   **/
  public void simulateData( List listeners, SketchSystem system ) 
  {
    boolean first = true;
    long start = System.currentTimeMillis();
    Iterator it  = m_data.iterator();
    StrokeData stroke;
    while( it.hasNext() ) {
	while ( true ) {
	    try {
		Thread.sleep( 500 );
	    } catch( Exception e ) {
		System.err.println( e );
	    }
	    System.out.println("waiting...");
	    if ( ((StageBasedScheduler)system.getBBSystem().getScheduler()).reallyDoneProcessing() ) {
	      long time = System.currentTimeMillis();
	      
	      if (!first) {
		system.getBBSystem().printStats( time - start );
	      }
	      break;
	    }
	}
	first = false;
	start = System.currentTimeMillis();
      stroke = (StrokeData)it.next();

      Iterator listenerIterator = listeners.iterator();
      while( listenerIterator.hasNext() ) {
      
      Object listener_object = listenerIterator.next();
    StrokeDataListener listener = (StrokeDataListener)listener_object;
    listener.handleStroke( stroke );
      }
    }

    if (system.getFileName() != null) {
	//ACS: Wait until we're really done
	while ( true ) {
	    try {
		Thread.sleep( 500 );
	    } catch( Exception e ) {
		System.err.println( e );
	    }
	    System.out.println("waiting to finish...");
	    if ( ((StageBasedScheduler)system.getBBSystem().getScheduler()).reallyDoneProcessing() ) 
		break;
	}
	system.getBBSystem().printStats( System.currentTimeMillis() - start );
        system.getRecognitionPanel().showNow(system.getFileName());
	system.getBBSystem().closeStats();
	System.exit(0);
    }
    
  }

}// DataSimulator
